package com.sky.service.impl;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.sky.dto.DishDTO;
import com.sky.dto.DishPageQueryDTO;
import com.sky.entity.Dish;
import com.sky.entity.DishFlavor;
import com.sky.mapper.DishFlavorMapper;
import com.sky.mapper.DishMapper;
import com.sky.result.PageResult;
import com.sky.service.DishService;
import com.sky.vo.DishVO;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;


@Service
@Slf4j
public class DishServiceImpl implements DishService {

    @Autowired
    private DishMapper dishMapper;
    @Autowired
    private DishFlavorMapper dishFlavorMapper;

    /**
     * add a new dish and relative flavor
     * @param dishDTO
     */
    @Transactional // this method refers to two sheets: dish and flavor. So it needs the @Transactional annotation, which can ensure consistency and integrity of data operations,
    // When multiple table operations are involved (e.g. the dish table and the flavor table), to ensure the consistency and integrity of the operations, these operations are typically placed within a transactional environment.
    // By using the @Transactional annotation, you can ensure that these operations either all succeed or all roll back, thereby avoiding data inconsistency issues.
    public void saveWithFlavor(DishDTO dishDTO) {

        log.info("save dish with flavor:{}", dishDTO);

        Dish dish = new Dish();
        BeanUtils.copyProperties(dishDTO,dish);

        // Insert a record into the dish table.
        dishMapper.insert(dish);

        // get the value of primary key generated by insert sentence in DishMapper.xml (useGeneratedKeys="true" keyProperty="id")
        Long dishId = dish.getId();

        List<DishFlavor> flavors = dishDTO.getFlavors();
        if(flavors != null && flavors.size() > 0){
            flavors.forEach(dishFlavor -> {
                dishFlavor.setDishId(dishId);
            });
            // Insert multiple records into the flavor table.
            dishFlavorMapper.insertBatch(flavors);

        }

    }


    /**
     * Dish page query
     * @param dishPageQueryDTO
     * @return
     */
    public PageResult pageQuery(DishPageQueryDTO dishPageQueryDTO) {
        PageHelper.startPage(dishPageQueryDTO.getPage(), dishPageQueryDTO.getPageSize());
        Page<DishVO> page = dishMapper.pageQuery(dishPageQueryDTO);
        return new PageResult(page.getTotal(),page.getResult());

    }
}
